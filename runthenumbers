#!/bin/bash

# Every N Blocks, we run the numbers
NBLOCK=5000
SLEEPSECONDS=5

# Where results should be saved
OUTPATH="/home/bitcoin/.runthenumbers/"

# BLOCKCLOCK mini
BLOCKCLOCK=0
BLOCKCLOCKADDR="21.21.21.21"
BLOCKCLOCKPASSWORD=""

# Determine base uri for blockclock api
bcmp=""
if [[ -n $BLOCKCLOCKPASSWORD ]]; then
    bcmp = " --digest -u :${BLOCKCLOCKPASSWORD} "
fi
bcu="curl -s ${bcmp} http://${BLOCKCLOCKADDR}/api/"
bcaa="${bcu}action/"
bcai="${bcu}image/4/honey"
bcao="${bcu}ou_text/"
bcal="${bcu}lights/"

# Report to the output in journalctl
logger "Run The Numbers will report the results of gettxoutsetinfo every ${NBLOCK} blocks"
# Initialize when last run and block last seen. 
last_run_block=-1
last_seen_block=-1

# functions
blockclock_start() {
    if [[ $BLOCKCLOCK -gt 0 ]]; then
        mod_blockclock=$(expr $current_block % $BLOCKCLOCK)
        if [[ $mod_blockclock -eq "0" ]]; then
            ${bcaa}pause
            ${bcal}flash || true
            ${bcao}0/RUNNI/ || true
            ${bcao}1/NG.THE/ || true
            ${bcao}2/NUMB/ || true
            ${bcao}3/ERS..../ || true
            ${bcao}4/.FOR./ || true
            ${bcao}5/...${current_block:0:3}/ || true
            ${bcao}6/${current_block:3:3}.../ || true
        fi
    fi
}

blockclock_finish() {
    if [[ $BLOCKCLOCK -gt 0 ]]; then
        mod_blockclock=$(expr $current_block % $BLOCKCLOCK)
        if [[ $mod_blockclock -eq "0" ]]; then
            # flash
            ${bcal}flash || true
            # rainbow
            ${bcal}f00 ; ${bcal}f60 ; ${bcal}ff0 ; ${bcal}0f0 ; ${bcal}00f
            # results
            ${bcao}0/RUN/${rtnamount:0:4} || true
            ${bcao}1/THE/${rtnamount:4:5} || true
            ${bcao}2/NUMB/${rtnamount:9:4} || true
            ${bcao}3/ERS..../${rtnamount:13:4} || true
            ${bcai} || true
            ${bcao}5/....BLO/...${rtnheight:0:3} || true
            ${bcao}6/CK...../${rtnheight:3:3}... || true
            # lights out
            ${bcal}off
            # allow updates again
            ${bcaa}update
        fi
    fi    
}

saveas_text() {
    echo "${txoutsetinfo}" > "${OUTPATH}the_numbers_${current_block}.txt"
    echo "${txoutsetinfo}" > "${OUTPATH}the_numbers_latest.txt"
    chmod a+r ${OUTPATH}the_numbers_${current_block}.txt
    chmod a+r ${OUTPATH}the_numbers_latest.txt
}

saveas_html() {
    dt=$(date)
    notfirstrun=""
    if [[ last_run_block -gt -1 ]]; then
        notfirstrun="<span class='nav orangebg greytext' onclick='showresults(${last_run_block})'>&nbsp;&#11207; ${last_run_block} &nbsp;</span> &nbsp;&nbsp;&nbsp; "
        # set the next block nav on the last run block file
        sed -i 's/greytext hidden/greytext/g' ${OUTPATH}the_numbers_${last_run_block}.htm
        sed -i 's/NEXTRUNBLOCK/'"${current_block}"'/g' ${OUTPATH}the_numbers_${last_run_block}.htm
    fi

    printf "<!DOCTYPE html>
<html>
  <head>
    <title>Run the Numbers!</title>
    <style>
    .orangebg {background-color:#f2a900}
    .greytext {font-family:ubuntu,lucida,roboto,sans-serif,helvetica,arial;font-weight:bold;font-style:italic;color:#4d4d4e;}
    .nav {cursor:pointer;}
    .hidden {display:none;}
    </style>
    <script languag='javascript'>
    function showresults(n) {location.href='the_numbers_'+n+'.htm';}
    </script>
  </head>
  <body class='greytext'>
    <center>
      <h1>Run The Numbers results from block ${rtnheight}</h1>
      <table class='greytext orangebg' style='width:800px;border:1px solid;padding:10px;border-spacing:25px;'>
        <tr><td title='The hash of the block up to which the UTXO is accurate'>Best Block</td><td>${rtnbestblock}</td></tr>
        <tr><td title='The number of transactions that have at least one non-spent output'>Transactions</td><td>${rtntransactions}</td></tr>
        <tr><td title='The number of unspent outputs'>TX Outs</td><td>${rtntxouts}</td></tr>
        <tr><td title='The value in BTC of all unspent outputs added together. The issued supply.'>Total Amount</td><td>${rtnamount}</td></tr>
      </table>
      <p>${dt}</p>
      <p>${notfirstrun}
        <span class='nav orangebg greytext hidden' onclick='showresults(NEXTRUNBLOCK)'>&nbsp; NEXTRUNBLOCK &#11208;&nbsp;</span> &nbsp;&nbsp;&nbsp; 
      </p>
    </center>
  </body>
</html>" > ${OUTPATH}the_numbers_latest.htm
    chmod a+r ${OUTPATH}the_numbers_latest.htm
    cp ${OUTPATH}the_numbers_latest.htm ${OUTPATH}the_numbers_${current_block}.htm
    chmod a+r ${OUTPATH}the_numbers_${current_block}.htm    
}


# Run continuously
while true
do
    # Get the current block, using the bitcoin-cli wrapper.
    current_block=$(bitcoin-cli getblockcount)
    # Just converts from a string to a number
    current_block=$(expr $current_block + 1 - 1)
    # Computes modulus of block number over our N block configured value
    mod_block=$(expr $current_block % $NBLOCK)
    # Log the block seen if whether we are about to run the numbers
    if [[ $current_block -gt $last_seen_block ]]; then
        last_seen_block=$current_block
        if [[ $mod_block -eq "0" ]]; then
            logger "Run The Numbers saw block $last_seen_block. RUNNING THE NUMBERS !!!"
        else
            logger "Run The Numbers saw block $last_seen_block."
        fi
    fi
    # Determine if we should run the numbers
    if [[ $mod_block -eq "0" ]]; then
        # Only run the numbers once per block
        if [[ $current_block -gt $last_run_block ]]; then           
            # BLOCKCLOCK mini push announcing we are running!
            blockclock_start
            # Run the numbers
            txoutsetinfo=$(bitcoin-cli gettxoutsetinfo)
            # Save results to files
            saveas_text
            # Capture height and total supply
            rtnheight=$(echo "${txoutsetinfo}"|jq -r '.height')
            rtnamount=$(echo "${txoutsetinfo}"|jq -r '.total_amount')
            rtnbestblock=$(echo "${txoutsetinfo}"|jq -r '.bestblock')
            rtntransactions=$(echo "${txoutsetinfo}"|jq -r '.transactions')
            rtntxouts=$(echo "${txoutsetinfo}"|jq '.txouts')
            # Assemble a message and log it
            rtnmessage=$(echo "Run The Numbers reports total BTC supply of ${rtnamount} as of block ${rtnheight}")
            logger "${rtnmessage}"
            # HTML output
            saveas_html
            # BLOCKCLOCK mini push when finished
            blockclock_finish
            # Update last run block
            last_run_block=$current_block
        fi
    fi
    # Query block height every n seconds
    sleep $SLEEPSECONDS
done
