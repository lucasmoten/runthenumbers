#!/bin/bash

# Every N Blocks, we run the numbers
NBLOCK=5000
SLEEPSECONDS=5

# BLOCKCLOCK mini
BLOCKCLOCK=0
BLOCKCLOCKADDR="21.21.21.21"
BLOCKCLOCKPASSWORD=""

# Determine base uri for blockclock api
bcmp=""
if [[ -n $BLOCKCLOCKPASSWORD ]]; then
    bcmp = " --digest -u :${BLOCKCLOCKPASSWORD} "
fi
bcai="http://${BLOCKCLOCKADDR}/api/image/4/honey"
bcao="http://${BLOCKCLOCKADDR}/api/ou_text/"
# Output path
OUTPATH="/home/bitcoin/.runthenumbers/"
# Report to the output in journalctl
logger "Run The Numbers will report the results of gettxoutsetinfo every ${NBLOCK} blocks"
# Initialize when last run and block last seen. 
last_run_block=-1
last_seen_block=-1
# Run continuously
while true
do
    # Get the current block, using the bitcoin-cli wrapper.
    current_block=$(bitcoin-cli getblockcount)
    # Just converts from a string to a number
    current_block=$(expr $current_block + 1 - 1)
    # Computes modulus of block number over our N block configured value
    mod_block=$(expr $current_block % $NBLOCK)
    # Log the block seen if whether we are about to run the numbers
    if [[ $current_block -gt $last_seen_block ]]; then
        last_seen_block=$current_block
        if [[ $mod_block -eq "0" ]]; then
            logger "Run The Numbers saw block $last_seen_block. RUNNING THE NUMBERS !!!"
        else
            logger "Run The Numbers saw block $last_seen_block."
        fi
    fi
    # Determine if we should run the numbers
    if [[ $mod_block -eq "0" ]]; then
        # Only one the numbers once per block
        if [[ $current_block -gt $last_run_block ]]; then
            # BLOCKCLOCK mini push
            if [[ $BLOCKCLOCK -gt 0 ]]; then
                curl -s ${bcmp} ${bcao}0/RUNNI/ || true
                curl -s ${bcmp} ${bcao}1/G.THE/ || true
                curl -s ${bcmp} ${bcao}2/NUMB/ || true
                curl -s ${bcmp} ${bcao}3/ERS..../ || true
                curl -s ${bcmp} ${bcao}4/.FOR./ || true
                curl -s ${bcmp} ${bcao}5/...${current_block:0:3}/ || true
                curl -s ${bcmp} ${bcao}6/${current_block:3:3}.../ || true
            fi
            # Run the numbers
            txoutsetinfo=$(bitcoin-cli gettxoutsetinfo)
            # Save results to files
            echo "${txoutsetinfo}" > "${OUTPATH}the_numbers_${current_block}.txt"
            echo "${txoutsetinfo}" > "${OUTPATH}the_numbers_latest.txt"
            chmod a+r ${OUTPATH}the_numbers_${current_block}.txt
            chmod a+r ${OUTPATH}the_numbers_latest.txt
            # Capture height and total supply
            rtnheight=$(cat ${OUTPATH}the_numbers_latest.txt|jq -r '.height')
            rtnamount=$(cat ${OUTPATH}the_numbers_latest.txt|jq -r '.total_amount')
            rtnbestblock=$(cat ${OUTPATH}the_numbers_latest.txt|jq -r '.bestblock')
            rtntransactions=$(cat ${OUTPATH}the_numbers_latest.txt|jq -r '.transactions')
            rtntxouts=$(cat ${OUTPATH}the_numbers_latest.txt|jq '.txouts')
            # Assemble a message and log it
            rtnmessage=$(echo "Run The Numbers reports total BTC supply of ${rtnamount} as of block ${rtnheight}")
            logger "${rtnmessage}"
            # HTML output
            echo "<!DOCTYPE html>" > ${OUTPATH}the_numbers_latest.htm
            echo "<html><head><title>Run the Numbers!</title>" >> ${OUTPATH}the_numbers_latest.htm
            echo "<style>" >> ${OUTPATH}the_numbers_latest.htm
            echo ".orangebg {background-color:#f2a900}" >> ${OUTPATH}the_numbers_latest.htm
            echo ".greytext {font-family:ubuntu,lucida,roboto,sans-serif,helvetica,arial;font-weight:bold;font-style:italic;color:#4d4d4e;}" >> ${OUTPATH}the_numbers_latest.htm
            echo ".nav {cursor:pointer;}" >> ${OUTPATH}the_numbers_latest.htm
            echo ".hidden {display:none;}" >> ${OUTPATH}the_numbers_latest.htm
            echo "</style>" >> ${OUTPATH}the_numbers_latest.htm
            echo "<script language='javascript'>" >> ${OUTPATH}the_numbers_latest.htm
            echo "function showresults(n) {location.href='the_numbers_' + n + '.htm';}" >> ${OUTPATH}the_numbers_latest.htm
            echo "</script>" >> ${OUTPATH}the_numbers_latest.htm
            echo "</head><body class='greytext'>" >> ${OUTPATH}the_numbers_latest.htm
            echo "<center>" >> ${OUTPATH}the_numbers_latest.htm
            echo "<h1>Run The Numbers results from block ${rtnheight}</h1>" >> ${OUTPATH}the_numbers_latest.htm
            echo "<table class='greytext orangebg' style='width:800px;border:1px solid;padding:10px;border-spacing:25px;'>" >> ${OUTPATH}the_numbers_latest.htm
            echo "<tr><td title='The hash of the block up to which the UTXO is accurate'>Best Block</td><td>${rtnbestblock}</td></tr>" >> ${OUTPATH}the_numbers_latest.htm
            echo "<tr><td title='The number of transactions that have at least one non-spent output'>Transactions</td><td>${rtntransactions}</td></tr>" >> ${OUTPATH}the_numbers_latest.htm
            echo "<tr><td title='The number of unspent outputs'>TX Outs</td><td>${rtntxouts}</td></tr>" >> ${OUTPATH}the_numbers_latest.htm
            echo "<tr><td title='The value in BTC of all unspent outputs added together. The issued supply.'>Total Amount</td><td>${rtnamount}</td></tr>" >> ${OUTPATH}the_numbers_latest.htm
            echo "</table>" >> ${OUTPATH}the_numbers_latest.htm
            dt=$(date)
            echo "<p>${dt}</p>" >> ${OUTPATH}the_numbers_latest.htm
            echo "<p>" >> ${OUTPATH}the_numbers_latest.htm
            # manipulate links if this isn't the first time we've run
            if [[ last_run_block -gt -1 ]]; then
                # add previous block nav to the current file
                echo "<span class='nav orangebg greytext' onclick='showresults(${last_run_block})'>&nbsp;&#11207; ${last_run_block} &nbsp;</span> &nbsp;&nbsp;&nbsp; " >> ${OUTPATH}the_numbers_latest.htm
                # set the next block nav on the last run block file
                sed -i 's/greytext hidden/greytext/g' ${OUTPATH}the_numbers_${last_run_block}.htm
                sed -i 's/NEXTRUNBLOCK/'"${current_block}"'/g' ${OUTPATH}the_numbers_${last_run_block}.htm
            fi
            # add a hidden placeholder link for the next block that gets run
            echo "<span class='nav orangebg greytext hidden' onclick='showresults(NEXTRUNBLOCK)'>&nbsp; NEXTRUNBLOCK &#11208;&nbsp;</span> &nbsp;&nbsp;&nbsp; " >> ${OUTPATH}the_numbers_latest.htm
            echo "</p>" >> ${OUTPATH}the_numbers_latest.htm
            echo "</center>" >> ${OUTPATH}the_numbers_latest.htm
            echo "</body></html>" >> ${OUTPATH}the_numbers_latest.htm
            chmod a+r ${OUTPATH}the_numbers_latest.htm
            cp ${OUTPATH}the_numbers_latest.htm ${OUTPATH}the_numbers_${current_block}.htm
            chmod a+r ${OUTPATH}the_numbers_${current_block}.htm
            # BLOCKCLOCK mini push
            if [[ $BLOCKCLOCK -gt 0 ]]; then
                curl -s ${bcmp} ${bcao}0/RUN/${rtnamount:0:4} || true
                curl -s ${bcmp} ${bcao}1/THE/${rtnamount:4:5} || true
                curl -s ${bcmp} ${bcao}2/NUMB/${rtnamount:9:4} || true
                curl -s ${bcmp} ${bcao}3/ERS..../${rtnamount:13:4} || true
                curl -s ${bcmp} ${bcai} || true
                curl -s ${bcmp} ${bcao}5/....BLO/...${rtnheight:0:3} || true
                curl -s ${bcmp} ${bcao}6/CK...../${rtnheight:3:3}... || true
            fi
            # Update last run block
            last_run_block=$current_block
        fi
    fi
    # Query block height every n seconds
    sleep $SLEEPSECONDS
done
